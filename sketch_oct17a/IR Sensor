#include <Ethernet.h>
#include <SPI.h>
#include <PubSubClient.h>
#include "SoftwareSerial.h"
#include "Adafruit_CCS811.h"
#include "Dht.h"

// DHT
#define DHTPIN 4
#define DHTTYPE DHT22


byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // RESERVED MAC ADDRESS
EthernetClient Eclient;

#define TOKEN "Sense02"

char thingsboardServer[] = "things.nav6.usm.my";

PubSubClient client(Eclient);

SoftwareSerial soft(2, 3); // RX, TX

unsigned long lastSend;

Adafruit_CCS811 ccs;

int measurePin = A5;
int ledPower = 12;

void setup() { 
  Serial.begin(9600);
  dht.begin();

  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP"); 
  }

  client.setServer( thingsboardServer, 1883 );
  lastSend = 0;

  if(!ccs.begin()){
    Serial.println("Failed to start sensor! Please check your wiring.");
    while(1);
  }

}

void loop(){

  if ( !client.connected() ) {
    reconnect();
  }

  if ( millis() - lastSend > 15000 ) { // Update and send only after 1 seconds
    getAndSendTemperatureAndHumidityData();
    lastSend = millis();
  }

  client.loop();
}

void getAndSendTemperatureAndHumidityData()
{
  Serial.println("Collecting temperature data.");

  //read CSS811 sensor
  float co2 = ccs.geteCO2();
  float voc = ccs.getTVOC();
  float voMeasured = 0;
  float calcVoltage = 0;
  float dustDensity = 0;
  voMeasured = analogRead(measurePin);
  calcVoltage = voMeasured*(5.0/1024);
  dustDensity = 0.17*calcVoltage-0.1;


//read Temperature and Humidity 
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  
  
  // Check if any reads failed and exit early (to try again).
  if (isnan(dustDensity) || isnan(co2) || isnan(voc) || isnan(h) || isnan(t)) {
    Serial.println("Failed to read sensor!");
    return;
  }

   if(ccs.available()){
    if(!ccs.readData()){
      Serial.print("Temperature: ");
      Serial.print(t);
      Serial.print("Humidity: ");
      Serial.print(h);
      Serial.print("CO2: ");
      Serial.print(co2);
      Serial.print("ppm, TVOC: ");
      Serial.print(voc);
      Serial.print("ppb");
     
    }
    else{
      Serial.println("ERROR!");
      while(1);
    }
  }

  Serial.println("Raw Signal Value (0-1023):");
  Serial.println(voMeasured);

  Serial.println("Voltage:");
  Serial.println(calcVoltage);

  Serial.println("Dust Density:");
  Serial.println(dustDensity);

  String CO2 = String(co2);
  String VOC = String(voc);
  String Dust = String(dustDensity); 


  // Just debug messages
  Serial.print( "Sending Sensor data : [" );
  //Serial.print( temperature ); Serial.print( "," );
  Serial.print( temperature ); Serial.print( "," );
  Serial.print( humidity );
  Serial.print( Dust );Serial.print( "," );
  Serial.print( CO2 ); Serial.print( "," );
  Serial.print( VOC );
  Serial.print( "]   -> " );

  // Prepare a JSON payload string
  String payload = "{";
  //payload += "\"temperature\":"; payload += temperature; payload += ",";
  payload += "\"Temperature\":"; payload += temperature; payload += ",";
  payload += "\"Humidity\":"; payload += humidity;
  payload += "\"Dust\":"; payload += Dust;payload += ",";
  payload += "\"CO2\":"; payload += CO2; payload += ",";
  payload += "\"VOC\":"; payload += VOC;
  payload += "}";

  // Send payload
  char attributes[100];
  payload.toCharArray( attributes, 100 );
  client.publish( "v1/devices/me/telemetry", attributes );
  Serial.println( attributes );
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Connecting to ThingsBoard node ...");
    // Attempt to connect (clientId, username, password)
    if ( client.connect("Arduino Uno Device", TOKEN, NULL) ) {
      Serial.println( "[DONE]" );
    } else {
      Serial.print( "[FAILED] [ rc = " );
      Serial.print( client.state() );
      Serial.println( " : retrying in 5 seconds]" );
      // Wait 5 seconds before retrying
      delay( 5000 );
    }
  }
  
  }
